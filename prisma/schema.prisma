generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

// === USUARIOS Y AUTENTICACIÓN ===
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // Hash de la contraseña
  role          UserRole  @default(CUSTOMER)
  phone         String?
  address       Json?     // {street, city, state, zipCode, country}
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  orders   Order[]
  cart     CartItem[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  CUSTOMER
  ADMIN
  MANAGER
  OPERATOR
}

// === PRODUCTOS ===
model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  image       String?
  parentId    String?
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String
  price       Decimal  @db.Decimal(10, 2)
  comparePrice Decimal? @db.Decimal(10, 2) // Precio tachado
  stock       Int      @default(0)
  minStock    Int      @default(5)
  sku         String   @unique
  barcode     String?
  weight      Decimal? @db.Decimal(8, 3) // kg
  dimensions  Json?    // {length, width, height} en cm
  images      String[] // URLs de Vercel Blob
  tags        String[]
  isActive    Boolean  @default(true)
  isFeatured  Boolean  @default(false)
  
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])
  
  // Campos específicos para impresión 3D
  material    String?  // PLA, ABS, PETG, etc.
  color       String?
  brand       String?
  diameter    String?  // 1.75mm, 3mm
  printTemp   String?  // Temperatura de impresión
  bedTemp     String?  // Temperatura de cama
  
  orderItems    OrderItem[]
  cartItems     CartItem[]
  productionJobs ProductionJob[]
  variants      ProductVariant[] // Variantes del producto (colores, tamaños, etc.)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([categoryId])
  @@index([isActive, isFeatured])
}

// Variantes de productos (colores, materiales, tamaños)
model ProductVariant {
  id              String   @id @default(cuid())
  productId       String
  
  // Identificación de la variante
  name            String   // "Dragon Negro", "Dragon Rojo", "Dragon Multicolor"
  sku             String   @unique
  
  // Características específicas
  color           String?  // "Negro", "Rojo", "Multicolor"
  material        String?  // "PLA", "ABS", "Resina"
  size            String?  // "Mini", "Standard", "Large"
  
  // Pricing específico por variante
  basePrice       Decimal  @db.Decimal(10, 2)
  currentPrice    Decimal  @db.Decimal(10, 2) // Precio actual (puede tener descuentos)
  
  // Inventario por variante
  stock           Int      @default(0)
  minStock        Int      @default(5)
  
  // Especificaciones de producción
  productionTime  Decimal? @db.Decimal(8, 2) // Horas de producción
  materialUsage   Json?    // { "PLA_NEGRO": "200g", "SUPPORTS": "50g" }
  
  // Configuración de impresión específica
  printSettings   Json?    // Configuraciones específicas para esta variante
  
  // Estado
  isActive        Boolean  @default(true)
  isDefault       Boolean  @default(false) // Variante por defecto del producto
  
  // Fechas
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relaciones
  product         Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  orderItems      OrderItemVariant[]
  cartItems       CartItemVariant[]
  
  @@index([productId])
  @@index([isActive])
  @@index([color])
  @@index([material])
}

// Relación mejorada para OrderItem con variantes
model OrderItemVariant {
  id          String         @id @default(cuid())
  orderItemId String
  variantId   String
  quantity    Int
  price       Decimal        @db.Decimal(10, 2) // Precio al momento de la compra
  
  orderItem   OrderItem      @relation(fields: [orderItemId], references: [id])
  variant     ProductVariant @relation(fields: [variantId], references: [id])
  
  @@unique([orderItemId, variantId])
}

// Relación mejorada para CartItem con variantes  
model CartItemVariant {
  id         String         @id @default(cuid())
  cartItemId String
  variantId  String
  quantity   Int
  
  cartItem   CartItem       @relation(fields: [cartItemId], references: [id])
  variant    ProductVariant @relation(fields: [variantId], references: [id])
  
  @@unique([cartItemId, variantId])
}

// === CARRITO ===
model CartItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  quantity  Int
  addedAt   DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  variants CartItemVariant[]

  @@unique([userId, productId])
}

// === PEDIDOS ===
model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique
  userId          String
  status          OrderStatus @default(PENDING)
  paymentStatus   PaymentStatus @default(PENDING)
  paymentMethod   String?     // stripe, paypal, transfer, etc.
  paymentId       String?     // ID de transacción
  
  // Información del cliente
  customerName    String
  customerEmail   String
  customerPhone   String?
  
  // Comprobante de pago (Peru tax compliance)
  documentType    String?         // boleta, factura
  documentNumber  String?         // DNI para boleta, RUC para factura
  businessName    String?         // Razón social para facturas
  
  // Dirección de envío
  shippingAddress Json        // {street, city, state, zipCode, country}
  billingAddress  Json?       // Si es diferente a shipping
  
  // Montos
  subtotal        Decimal     @db.Decimal(10, 2)
  shippingCost    Decimal     @db.Decimal(10, 2) @default(0)
  tax             Decimal     @db.Decimal(10, 2) @default(0)
  discount        Decimal     @db.Decimal(10, 2) @default(0)
  total           Decimal     @db.Decimal(10, 2)
  
  // Fechas
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  shippedAt       DateTime?
  deliveredAt     DateTime?
  
  // Notas
  notes           String?
  internalNotes   String?     // Solo para admin
  
  user            User        @relation(fields: [userId], references: [id])
  items           OrderItem[]
  productionJobs  ProductionJob[]
  
  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal @db.Decimal(10, 2) // Precio al momento de la compra
  
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])
  variants OrderItemVariant[]
  
  @@index([orderId])
}

enum OrderStatus {
  PENDING       // Pendiente de pago
  CONFIRMED     // Confirmado y pagado
  PROCESSING    // En preparación
  PRODUCTION    // En producción (para items personalizados)
  SHIPPED       // Enviado
  DELIVERED     // Entregado
  CANCELLED     // Cancelado
  RETURNED      // Devuelto
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

// === INVENTARIO DETALLADO ===
model Material {
  id          String   @id @default(cuid())
  name        String   @unique
  type        MaterialType
  supplier    String?
  stock       Decimal  @db.Decimal(10, 3) // kg o unidades
  minStock    Decimal  @db.Decimal(10, 3)
  maxStock    Decimal? @db.Decimal(10, 3)
  unit        String   @default("kg") // kg, units, meters, etc.
  costPerUnit Decimal  @db.Decimal(10, 4)
  location    String?  // Ubicación en almacén
  
  // Nuevos campos para trazabilidad
  sku         String?  @unique // Código del material
  description String?
  density     Decimal? @db.Decimal(6, 3) // g/cm³ para cálculos volumétricos
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relaciones nuevas (compatibles)
  batches     MaterialBatch[]
  movements   InventoryMovement[]
  
  @@index([type])
}

// Lotes/Batches de materiales para trazabilidad
model MaterialBatch {
  id            String   @id @default(cuid())
  materialId    String
  batchNumber   String   @unique // Número de lote
  
  // Información de compra
  purchaseDate  DateTime
  supplier      String?
  invoiceNumber String?
  
  // Cantidades y costos
  originalQty   Decimal  @db.Decimal(10, 3) // Cantidad inicial
  currentQty    Decimal  @db.Decimal(10, 3) // Cantidad actual
  unitCost      Decimal  @db.Decimal(10, 4) // Costo por unidad
  totalCost     Decimal  @db.Decimal(10, 2) // Costo total del lote
  
  // Estado del lote
  isActive      Boolean  @default(true)
  expiryDate    DateTime? // Fecha de vencimiento si aplica
  
  // Trazabilidad
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relaciones
  material      Material @relation(fields: [materialId], references: [id])
  movements     InventoryMovement[]
  
  @@index([materialId])
  @@index([isActive])
}

// Movimientos de inventario detallados
model InventoryMovement {
  id              String          @id @default(cuid())
  
  // Identificación del movimiento
  movementNumber  String          @unique
  type            MovementType
  reference       String?         // Orden, trabajo, etc.
  
  // Material y lote afectado
  materialId      String
  batchId         String?         // Lote específico (si aplica)
  
  // Cantidades
  quantity        Decimal         @db.Decimal(10, 3)
  unitCost        Decimal?        @db.Decimal(10, 4) // Costo unitario en el momento
  totalCost       Decimal?        @db.Decimal(10, 2) // Costo total del movimiento
  
  // Stock después del movimiento
  stockAfter      Decimal         @db.Decimal(10, 3)
  
  // Información adicional
  notes           String?
  createdBy       String?         // Usuario que hizo el movimiento
  
  // Relación con trabajos de producción
  productionJobId String?
  
  // Fechas
  movementDate    DateTime        @default(now())
  createdAt       DateTime        @default(now())
  
  // Relaciones
  material        Material        @relation(fields: [materialId], references: [id])
  batch           MaterialBatch?  @relation(fields: [batchId], references: [id])
  productionJob   ProductionJob?  @relation(fields: [productionJobId], references: [id])
  
  @@index([materialId])
  @@index([type])
  @@index([movementDate])
}

// Costos de producción detallados
model ProductionCost {
  id                String        @id @default(cuid())
  productionJobId   String        @unique
  
  // Costos de materiales (calculado de movimientos)
  materialCost      Decimal       @db.Decimal(10, 2)
  materialDetails   Json          // Detalle de materiales usados
  
  // Costos operativos
  machineTimeCost   Decimal       @db.Decimal(8, 2)
  laborCost         Decimal       @db.Decimal(8, 2)
  electricityCost   Decimal       @db.Decimal(8, 2)
  overheadCost      Decimal       @db.Decimal(8, 2)
  
  // Totales
  totalDirectCost   Decimal       @db.Decimal(10, 2)
  totalCost         Decimal       @db.Decimal(10, 2)
  
  // Pricing sugerido
  suggestedPrice    Decimal?      @db.Decimal(10, 2)
  profitMargin      Decimal?      @db.Decimal(5, 2) // Porcentaje
  
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  
  // Relaciones
  productionJob     ProductionJob @relation(fields: [productionJobId], references: [id])
}

enum MovementType {
  PURCHASE      // Compra/Ingreso
  CONSUMPTION   // Consumo en producción
  ADJUSTMENT    // Ajuste de inventario
  TRANSFER      // Transferencia entre ubicaciones
  WASTE         // Desperdicio/Merma
  RETURN        // Devolución
}

enum MaterialType {
  FILAMENT_PLA
  FILAMENT_ABS
  FILAMENT_PETG
  FILAMENT_TPU
  RESIN_STANDARD
  RESIN_TOUGH
  RESIN_FLEXIBLE
  HARDWARE      // Tornillos, tuercas, etc.
  ELECTRONICS   // Componentes electrónicos
  CONSUMABLES   // Alcohol, papel, etc.
}

// === PRODUCCIÓN ===
model ProductionJob {
  id            String          @id @default(cuid())
  orderId       String?         // Puede ser null para trabajos de reposición
  productId     String?         // Puede ser null para trabajos personalizados
  jobNumber     String          @unique
  name          String
  description   String?
  status        ProductionStatus @default(QUEUED)
  priority      Int             @default(5) // 1-10, 10 es más alta
  
  // Tiempos estimados
  estimatedHours Decimal?       @db.Decimal(8, 2)
  actualHours    Decimal?       @db.Decimal(8, 2)
  
  // Archivos
  files         String[]        // URLs de archivos STL, GCODE, etc.
  
  // Configuración de impresión
  printer       String?         // ID o nombre de impresora asignada
  material      String?         // Material a usar
  settings      Json?           // Configuraciones específicas
  
  // Fechas
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  startedAt     DateTime?
  completedAt   DateTime?
  
  // Notas
  notes         String?
  
  order         Order?          @relation(fields: [orderId], references: [id])
  product       Product?        @relation(fields: [productId], references: [id])
  
  // Relaciones con inventario y costos
  inventoryMovements InventoryMovement[]
  productionCost    ProductionCost?
  
  @@index([status, priority])
  @@index([orderId])
}

enum ProductionStatus {
  QUEUED        // En cola
  IN_PROGRESS   // En producción
  PAUSED        // Pausado
  COMPLETED     // Completado
  FAILED        // Falló
  CANCELLED     // Cancelado
}

// === CONFIGURACIONES ===
model Setting {
  id    String @id @default(cuid())
  key   String @unique
  value Json
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}